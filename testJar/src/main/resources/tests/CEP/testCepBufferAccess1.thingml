import "../thingml.thingml"

thing fragment CepMsgs
{
  message m(v : Int16)
  message m2(t: Int16, v : Int16) // here want the second param
  message cep(v : Int16)
}

thing TestCepBufferAccess1 includes CepMsgs, Test
@c_header "#include <Arduino.h>"
@test " # OO"
@conf "connector test.rcvPort => test.sendPort"
{

  provided port sendPort {
    sends m, m2, cep
  }

  required port rcvPort {
    receives m, m2, cep
  }

  function sum(values: Int16[], size: UInt8) : Int16 do
    var tmp: Int16 = 0
    var index : UInt8 = 0
    while (index < size) do
      tmp = tmp + values[index]
      index = index + 1
    end
    return tmp
  end


  stream aggregateM
  from e : rcvPort?m::buffer 4 by 4
  select var sum : Int16 = sum(e.v[], e.length)
  produce sendPort!cep(sum)

  stream aggregateM2
  from e : rcvPort?m2::buffer 4 by 4
  select var sum : Int16 = sum(e.v[], e.length)
  produce sendPort!cep(sum)

  statechart Sample init Init {
    state Init {
      on entry do
        sendPort!m(1)
        sendPort!m(2)
        sendPort!m(3)
        sendPort!m(4)

        sendPort!m2(0, 1)
        sendPort!m2(0, 2)
        sendPort!m2(0, 3)
        sendPort!m2(0, 4)
      end

      internal event e: rcvPort?cep
      action do
        if (e.v == 10) do
          harnessOut!testOut('\'O\'')
        end
      end
    }
  }
}
