import "../thingml.thingml"

thing fragment TestMsgs {
    message m1();
    message m2();

    message res();
}

thing TestJoinFilter includes Test, TestMsgs
@test " # f"
@conf "connector test.recv => test.send"
{
    provided port send {
        sends m1, m2, res
    }

    required port recv {
        receives m1, m2, res
    }

    stream filteredJoin1 
    from m : [ e1 : recv?m1::keep if false & e2 : recv?m2::keep if true -> res()]
    produce send!res()   
    
    stream filteredJoin2
    from m : [ e1 : recv?m1 & e2 : recv?m2::keep if true -> res()]::keep if true
    produce send!res()

    stream filteredJoin3
    from m : [ e1 : recv?m1 & e2 : recv?m2::keep if true -> res()]::keep if false
    produce send!res()
    



    statechart testSimpleFilter init Init {
        state Init {
            on entry do
                send!m1()
                send!m2()
            end

            internal
            event recv?res
            action harnessOut!testOut('\'f\'')
        }
    }


}
