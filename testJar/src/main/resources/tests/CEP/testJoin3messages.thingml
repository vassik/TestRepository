import "../thingml.thingml"

thing fragment TestMsgs {
  message m1();
  message m2();
  message m3();

  message res();
}

thing TestJoin3messages includes Test, TestMsgs
@test " # f"
@conf "connector test.recv => test.send"
{
  provided port send {
    sends m1, m2, m3, res
  }

  required port recv {
    receives m1, m2, m3, res
  }

  stream filterStream
  from m: [e1: recv?m1 & e2: recv?m2 & e3: recv?m3 -> res()]
  produce send!res()


    statechart testSimpleFilter init Init {
        state Init {
            on entry do
                send!m1()
                send!m2()
                send!m3()
            end

            internal
            event recv?res
            action harnessOut!testOut('\'f\'')
        }
    }


}
