import "../thingml.thingml"
    
datatype JInt<2>
    @c_type "int"
    @java_type "int"
    @js_type "int";
    
thing fragment CepMsgs 
{
    message cep1();
    message cep2(val1 : JInt, val2 : JInt, val3 : JInt);
}

thing fragment SampleMsgs {
    // Messages receive by "simple" streams
    message m1();
    message m2();
    message m3();

    message m4(x : JInt, y : JInt, z : JInt);
    message m5(value1 : JInt, value2 : JInt, value3 : JInt);
    message m6(a : JInt, b : JInt, c : JInt);
    message m7(v1 : JInt, v2 : JInt, v3 : JInt);
}

thing TestMergeStreams includes CepMsgs,  SampleMsgs, Test
@test " # 1112345"
@conf "connector test.rcvPort => test.sendPort"
{
    provided port sendPort {
        sends m1, m2, m3, m4, m5, m6, m7, cep1, cep2
    }
    
    required port rcvPort {
        receives m1, m2, m3, m4, m5, m6, m7, cep1, cep2
    }
    
    function complexTransforming(value : JInt) : JInt do
        return value + 1
    end
    

    stream mergedSimpleMessages
    from result : [ e1 : rcvPort?m1 | e2 : rcvPort?m2 | e3: rcvPort?m3 -> cep1]
    produce sendPort!cep1()
    
    stream mergeMessagesWithValues
    from result : [ e1 : rcvPort?m4 | e2 : rcvPort?m5 | e3 : rcvPort?m6 | e4 : rcvPort?m7 -> cep2]
    select var a : Integer = result.val1, 
           var b : Integer = complexTransforming(result.val2) - 1, 
           var c : Integer = 3
    produce sendPort!cep2(a,b,c)
    
   statechart Sample init Init {
        state Init {
            on entry do
                sendPort!m1()
                sendPort!m2()
                sendPort!m3()

                sendPort!m4(1,2,3)
                sendPort!m5(4,5,6)
                sendPort!m6(7,8,9)
                sendPort!m7(10,11,12)
            end
            
            internal
            event rcvPort?cep1
            action do 
                harnessOut!testOut('\'1\'')
            end
             
            internal 
            event e : rcvPort?cep2
            action do
                if(e.val1 == 1 and e.val2 == 2 and e.val3 == 3) harnessOut!testOut('\'2\'')
                if(e.val1 == 4 and e.val2 == 5 and e.val3 == 3) harnessOut!testOut('\'3\'')
                if(e.val1 == 7 and e.val2 == 8 and e.val3 == 3) harnessOut!testOut('\'4\'')
                if(e.val1 == 10 and e.val2 == 11 and e.val3 == 3) harnessOut!testOut('\'5\'')
            end
        }    
    }
    
}
