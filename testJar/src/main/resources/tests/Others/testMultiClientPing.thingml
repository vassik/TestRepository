import "../thingml.thingml"

// Two independents client server couples.

thing PingMsg {
    message ping(num : Int16);
    message pong(num : Int16);        
}

thing PingServer includes PingMsg {
    
    provided port pp {
         receives ping
         sends pong
    }
    
    statechart PingServer init Idle {
    
        state Idle {
            internal event p : pp?ping
            action pp!pong(p.num)    
        }    
    } 
}

thing TestMultiClientPing includes Test, PingMsg
@test "1121200221 # P1P1P2P1P2PPP2P2P1" // False
@conf "instance pingServ1 : PingServer"
@conf "instance pingServ2 : PingServer"
@conf "connector test.ppclient1 => pingServ1.pp"
@conf "connector test.ppclient2 => pingServ2.pp"
{
    required port ppclient1 {
        sends ping
        receives pong    
    }
    
    required port ppclient2 {
        sends ping
        receives pong    
    }
    
	statechart TestMultiClientPing init Ping {
	
		state Ping {
			internal event m : harnessIn?testIn
			guard m.c == '\'1\''
			action do
                	harnessOut!testOut('\'P\'')
                	ppclient1!ping(1)
                end
            internal event m : harnessIn?testIn
			guard m.c == '\'2\''
			action do
                	harnessOut!testOut('\'P\'')
                	ppclient2!ping(2)
            	end
            internal event m : harnessIn?testIn
			guard m.c == '\'0\''
			action do
                	harnessOut!testOut('\'P\'')
                	ppclient2!ping(0)
            	end
		}
		
		region R1 init Idle {
		
			state Idle {
				internal event p : ppclient1?pong
				guard p.num == 1
				action harnessOut!testOut('\'1\'')
			}
		}
		
		region R2 init Idle_R2 {//renamed to avoid name conflict (tested separately)
		
			state Idle_R2 {
				internal event p : ppclient2?pong
				guard p.num == 2
				action harnessOut!testOut('\'2\'')
			}
		}
	}
}
