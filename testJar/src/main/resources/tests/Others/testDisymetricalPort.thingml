import "../thingml.thingml"

thing TestDisymetricalPort includes Test
@test "12 # I1"
@conf "connector test.pout => test.pin"
{
	message m1();
	message m2();
	message m3();

	provided port pin {
		receives m1, m3
	}
	required port pout {
		sends m1, m2
	}
	statechart Chart init Init {
		state Init {
			on entry do
				harnessOut!testOut('\'I\'')
			end

			internal event e : harnessIn?testIn
			guard e.c == '\'1\''	
			action pout!m1()	

			internal event e : harnessIn?testIn
			guard e.c == '\'2\''		
			action pout!m2()	

			internal event pin?m1
			action harnessOut!testOut('\'1\'')

			internal event pin?m3
			action harnessOut!testOut('\'3\'')
		}
	}
}
