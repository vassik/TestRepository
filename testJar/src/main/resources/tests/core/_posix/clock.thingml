import "../../datatypes.thingml"

thing fragment ClockMsgs {
	message clock_tick();
}

thing fragment Clock includes ClockMsgs 
{
	readonly property period : Integer = 1000 // clock period in ms
	
	provided port signal {
		sends clock_tick
	}
}

thing ClockPosix includes Clock 
@c_headers "#include <sys/time.h>"
{

	function sleep_ms(timeout_ms : Integer)
	do
		'struct timeval tv;
        tv.tv_sec = '& timeout_ms &'/1000;
        tv.tv_usec = ('& timeout_ms &'%1000) * 1000;
        select(0, NULL, NULL, NULL, &tv);'
	end
	
	function start_clock_process()
	@fork_linux_thread "true"
	do
		while (1) do
			sleep_ms(period)
			signal!clock_tick()
		end
	end
	
	statechart ClockImpl init Ticking {
		on entry start_clock_process()
		state Ticking{}
	}
}

thing ClockTestApp includes ClockMsgs {

	required port clock1 { receives clock_tick }
	required port clock2 { receives clock_tick }
	
	statechart 	PosixClockTestAppImpl init Running {
		state Running {
			internal event clock1?clock_tick action print "Tick 1\n"
			internal event clock2?clock_tick action print "Tick 2\n"
		}
	}
}

/*configuration PosixClockTest 
  //@output_folder "/home/thingml_out/"
  @debug "true"
  @debug_fifo "true"
  @debug_message_send ".*"
  @debug_message_receive ".*"
{
	// Create a first clock with a 2 sec period
	instance c1 : ClockPosix 
	set c1.period = 2000
	
	// Create a second clock with a 5 sec period
	instance c2 : ClockPosix
	set c2.period = 5000
	
	// Create and connect the test app
	instance app : ClockTestApp
	connector app.clock1 => c1.signal
	connector app.clock2 => c2.signal
}*/
