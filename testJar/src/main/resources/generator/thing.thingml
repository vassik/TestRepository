datatype Int<4>
@type_checker "Integer"
@java_type "int"
@c_type "int32_t";

datatype Boolean<1>
@type_checker "Boolean"
@java_type "boolean"
@c_type "bool";

thing fragment API {
    message a()
    message b(x : Int)
    message kill()
}

thing Controller includes API {
    required port p {
        sends a, b, kill
        receives a, b
    }

    property counter_t : Int = 0
    readonly property max_t : Int = /*$MAX_T$*/

    function process() do
        counter_t = counter_t + 1
        if (counter_t%2 == 0) do
            p!a()
        end else do
            p!b(counter_t)
        end
    end

    statechart behavior init INIT {
        composite state INIT init DEFAULT {

            internal event p?a
            guard counter_t < max_t
            action process()

            internal event p?b
            guard counter_t < max_t
            action process()

            transition -> DIE
            event p?a
            guard counter_t >= max_t

            transition -> DIE
            event p?b
            guard counter_t >= max_t

            state DEFAULT {}
        }

        final state DIE {
            on entry do
                p!kill()
                print "The End.\n"
                print "#t = "
                print counter_t
                print "\n"
            end
        }
    }
}

thing /*$NAME$*/ includes API {

    message terminated()

    provided port p {
        sends a, b
        receives a, b, kill
    }

    internal port sessionPort {
        sends terminated
        receives terminated
    }

    property nbSessions : Int = 0
    readonly property maxSessions : Int = 64

    property a : Int = 0
    property b : Int = 0
    property c : Int[8]

    function f1() do
        b = b + 1
        a = a - 1
    end

    function f2() do
        b = b - 1
        a = a + 1
    end

    statechart behavior init  INIT {

        composite state INIT init /*$INIT_NAME$*/ {

            internal event sessionPort?terminated
            action do
                nbSessions = nbSessions - 1
                p!a()
                p!b(nbSessions)
            end

            transition -> DIE
            event p?kill
            action do
                print "The End.\n"
                print "a = "
                print a
                print "\n"
                print "b = "
                print b
                print "\n"
                print "#sessions = "
                print nbSessions
                print "\n"
            end

            /*$BEHAVIOR$*/
        }

        final state DIE {
            on entry print "RIP!\n"
        }
    }

}

configuration cfg {
    instance c : Controller
    instance t : /*$NAME$*/

    connector c.p => t.p
}